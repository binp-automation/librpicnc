use std::error::Error as ErrorTrait;
use std::fmt;

use libc::{c_int};

use generated::pigpio::*;


#[derive(Debug)]
pub struct Error {
	code: c_int,
}

impl Error {
	pub fn new(code: c_int) -> Error {
		Error { code: code }
	}
}

#[allow(unreachable_patterns)]
impl ErrorTrait for Error {
	fn description(&self) -> &str {
		match self.code {
			PI_INIT_FAILED     => "INIT_FAILED: gpioInitialise failed",
			PI_BAD_USER_GPIO   => "BAD_USER_GPIO: GPIO not 0-31",
			PI_BAD_GPIO        => "BAD_GPIO: GPIO not 0-53",
			PI_BAD_MODE        => "BAD_MODE: mode not 0-7",
			PI_BAD_LEVEL       => "BAD_LEVEL: level not 0-1",
			PI_BAD_PUD         => "BAD_PUD: pud not 0-2",
			PI_BAD_PULSEWIDTH  => "BAD_PULSEWIDTH: pulsewidth not 0 or 500-2500",
			PI_BAD_DUTYCYCLE   => "BAD_DUTYCYCLE: dutycycle outside set range",
			PI_BAD_TIMER       => "BAD_TIMER: timer not 0-9",
			PI_BAD_MS          => "BAD_MS: ms not 10-60000",
			PI_BAD_TIMETYPE    => "BAD_TIMETYPE: timetype not 0-1",
			PI_BAD_SECONDS     => "BAD_SECONDS: seconds < 0",
			PI_BAD_MICROS      => "BAD_MICROS: micros not 0-999999",
			PI_TIMER_FAILED    => "TIMER_FAILED: gpioSetTimerFunc failed",
			PI_BAD_WDOG_TIMEOUT=> "BAD_WDOG_TIMEOUT: timeout not 0-60000",
			PI_NO_ALERT_FUNC   => "NO_ALERT_FUNC: DEPRECATED",
			PI_BAD_CLK_PERIPH  => "BAD_CLK_PERIPH: clock peripheral not 0-1",
			PI_BAD_CLK_SOURCE  => "BAD_CLK_SOURCE: DEPRECATED",
			PI_BAD_CLK_MICROS  => "BAD_CLK_MICROS: clock micros not 1, 2, 4, 5, 8, or 10",
			PI_BAD_BUF_MILLIS  => "BAD_BUF_MILLIS: buf millis not 100-10000",
			PI_BAD_DUTYRANGE   => "BAD_DUTYRANGE: dutycycle range not 25-40000",
			PI_BAD_DUTY_RANGE  => "BAD_DUTY_RANGE: DEPRECATED (use PI_BAD_DUTYRANGE)",
			PI_BAD_SIGNUM      => "BAD_SIGNUM: signum not 0-63",
			PI_BAD_PATHNAME    => "BAD_PATHNAME: can't open pathname",
			PI_NO_HANDLE       => "NO_HANDLE: no handle available",
			PI_BAD_HANDLE      => "BAD_HANDLE: unknown handle",
			PI_BAD_IF_FLAGS    => "BAD_IF_FLAGS: ifFlags > 3",
			PI_BAD_CHANNEL     => "BAD_CHANNEL: DMA channel not 0-14",
			PI_BAD_PRIM_CHANNEL=> "BAD_PRIM_CHANNEL: DMA primary channel not 0-14",
			PI_BAD_SOCKET_PORT => "BAD_SOCKET_PORT: socket port not 1024-32000",
			PI_BAD_FIFO_COMMAND=> "BAD_FIFO_COMMAND: unrecognized fifo command",
			PI_BAD_SECO_CHANNEL=> "BAD_SECO_CHANNEL: DMA secondary channel not 0-6",
			PI_NOT_INITIALISED => "NOT_INITIALISED: function called before gpioInitialise",
			PI_INITIALISED     => "INITIALISED: function called after gpioInitialise",
			PI_BAD_WAVE_MODE   => "BAD_WAVE_MODE: waveform mode not 0-3",
			PI_BAD_CFG_INTERNAL=> "BAD_CFG_INTERNAL: bad parameter in gpioCfgInternals call",
			PI_BAD_WAVE_BAUD   => "BAD_WAVE_BAUD: baud rate not 50-250K(RX)/50-1M(TX)",
			PI_TOO_MANY_PULSES => "TOO_MANY_PULSES: waveform has too many pulses",
			PI_TOO_MANY_CHARS  => "TOO_MANY_CHARS: waveform has too many chars",
			PI_NOT_SERIAL_GPIO => "NOT_SERIAL_GPIO: no bit bang serial read on GPIO",
			PI_BAD_SERIAL_STRUC=> "BAD_SERIAL_STRUC: bad (null) serial structure parameter",
			PI_BAD_SERIAL_BUF  => "BAD_SERIAL_BUF: bad (null) serial buf parameter",
			PI_NOT_PERMITTED   => "NOT_PERMITTED: GPIO operation not permitted",
			PI_SOME_PERMITTED  => "SOME_PERMITTED: one or more GPIO not permitted",
			PI_BAD_WVSC_COMMND => "BAD_WVSC_COMMND: bad WVSC subcommand",
			PI_BAD_WVSM_COMMND => "BAD_WVSM_COMMND: bad WVSM subcommand",
			PI_BAD_WVSP_COMMND => "BAD_WVSP_COMMND: bad WVSP subcommand",
			PI_BAD_PULSELEN    => "BAD_PULSELEN: trigger pulse length not 1-100",
			PI_BAD_SCRIPT      => "BAD_SCRIPT: invalid script",
			PI_BAD_SCRIPT_ID   => "BAD_SCRIPT_ID: unknown script id",
			PI_BAD_SER_OFFSET  => "BAD_SER_OFFSET: add serial data offset > 30 minutes",
			PI_GPIO_IN_USE     => "GPIO_IN_USE: GPIO already in use",
			PI_BAD_SERIAL_COUNT=> "BAD_SERIAL_COUNT: must read at least a byte at a time",
			PI_BAD_PARAM_NUM   => "BAD_PARAM_NUM: script parameter id not 0-9",
			PI_DUP_TAG         => "DUP_TAG: script has duplicate tag",
			PI_TOO_MANY_TAGS   => "TOO_MANY_TAGS: script has too many tags",
			PI_BAD_SCRIPT_CMD  => "BAD_SCRIPT_CMD: illegal script command",
			PI_BAD_VAR_NUM     => "BAD_VAR_NUM: script variable id not 0-149",
			PI_NO_SCRIPT_ROOM  => "NO_SCRIPT_ROOM: no more room for scripts",
			PI_NO_MEMORY       => "NO_MEMORY: can't allocate temporary memory",
			PI_SOCK_READ_FAILED=> "SOCK_READ_FAILED: socket read failed",
			PI_SOCK_WRIT_FAILED=> "SOCK_WRIT_FAILED: socket write failed",
			PI_TOO_MANY_PARAM  => "TOO_MANY_PARAM: too many script parameters (> 10)",
			PI_NOT_HALTED      => "NOT_HALTED: DEPRECATED",
			PI_SCRIPT_NOT_READY=> "SCRIPT_NOT_READY: script initialising",
			PI_BAD_TAG         => "BAD_TAG: script has unresolved tag",
			PI_BAD_MICS_DELAY  => "BAD_MICS_DELAY: bad MICS delay (too large)",
			PI_BAD_MILS_DELAY  => "BAD_MILS_DELAY: bad MILS delay (too large)",
			PI_BAD_WAVE_ID     => "BAD_WAVE_ID: non existent wave id",
			PI_TOO_MANY_CBS    => "TOO_MANY_CBS: No more CBs for waveform",
			PI_TOO_MANY_OOL    => "TOO_MANY_OOL: No more OOL for waveform",
			PI_EMPTY_WAVEFORM  => "EMPTY_WAVEFORM: attempt to create an empty waveform",
			PI_NO_WAVEFORM_ID  => "NO_WAVEFORM_ID: no more waveforms",
			PI_I2C_OPEN_FAILED => "I2C_OPEN_FAILED: can't open I2C device",
			PI_SER_OPEN_FAILED => "SER_OPEN_FAILED: can't open serial device",
			PI_SPI_OPEN_FAILED => "SPI_OPEN_FAILED: can't open SPI device",
			PI_BAD_I2C_BUS     => "BAD_I2C_BUS: bad I2C bus",
			PI_BAD_I2C_ADDR    => "BAD_I2C_ADDR: bad I2C address",
			PI_BAD_SPI_CHANNEL => "BAD_SPI_CHANNEL: bad SPI channel",
			PI_BAD_FLAGS       => "BAD_FLAGS: bad i2c/spi/ser open flags",
			PI_BAD_SPI_SPEED   => "BAD_SPI_SPEED: bad SPI speed",
			PI_BAD_SER_DEVICE  => "BAD_SER_DEVICE: bad serial device name",
			PI_BAD_SER_SPEED   => "BAD_SER_SPEED: bad serial baud rate",
			PI_BAD_PARAM       => "BAD_PARAM: bad i2c/spi/ser parameter",
			PI_I2C_WRITE_FAILED=> "I2C_WRITE_FAILED: i2c write failed",
			PI_I2C_READ_FAILED => "I2C_READ_FAILED: i2c read failed",
			PI_BAD_SPI_COUNT   => "BAD_SPI_COUNT: bad SPI count",
			PI_SER_WRITE_FAILED=> "SER_WRITE_FAILED: ser write failed",
			PI_SER_READ_FAILED => "SER_READ_FAILED: ser read failed",
			PI_SER_READ_NO_DATA=> "SER_READ_NO_DATA: ser read no data available",
			PI_UNKNOWN_COMMAND => "UNKNOWN_COMMAND: unknown command",
			PI_SPI_XFER_FAILED => "SPI_XFER_FAILED: spi xfer/read/write failed",
			PI_BAD_POINTER     => "BAD_POINTER: bad (NULL) pointer",
			PI_NO_AUX_SPI      => "NO_AUX_SPI: no auxiliary SPI on Pi A or B",
			PI_NOT_PWM_GPIO    => "NOT_PWM_GPIO: GPIO is not in use for PWM",
			PI_NOT_SERVO_GPIO  => "NOT_SERVO_GPIO: GPIO is not in use for servo pulses",
			PI_NOT_HCLK_GPIO   => "NOT_HCLK_GPIO: GPIO has no hardware clock",
			PI_NOT_HPWM_GPIO   => "NOT_HPWM_GPIO: GPIO has no hardware PWM",
			PI_BAD_HPWM_FREQ   => "BAD_HPWM_FREQ: hardware PWM frequency not 1-125M",
			PI_BAD_HPWM_DUTY   => "BAD_HPWM_DUTY: hardware PWM dutycycle not 0-1M",
			PI_BAD_HCLK_FREQ   => "BAD_HCLK_FREQ: hardware clock frequency not 4689-250M",
			PI_BAD_HCLK_PASS   => "BAD_HCLK_PASS: need password to use hardware clock 1",
			PI_HPWM_ILLEGAL    => "HPWM_ILLEGAL: illegal, PWM in use for main clock",
			PI_BAD_DATABITS    => "BAD_DATABITS: serial data bits not 1-32",
			PI_BAD_STOPBITS    => "BAD_STOPBITS: serial (half) stop bits not 2-8",
			PI_MSG_TOOBIG      => "MSG_TOOBIG: socket/pipe message too big",
			PI_BAD_MALLOC_MODE => "BAD_MALLOC_MODE: bad memory allocation mode",
			PI_TOO_MANY_SEGS   => "TOO_MANY_SEGS: too many I2C transaction segments",
			PI_BAD_I2C_SEG     => "BAD_I2C_SEG: an I2C transaction segment failed",
			PI_BAD_SMBUS_CMD   => "BAD_SMBUS_CMD: SMBus command not supported by driver",
			PI_NOT_I2C_GPIO    => "NOT_I2C_GPIO: no bit bang I2C in progress on GPIO",
			PI_BAD_I2C_WLEN    => "BAD_I2C_WLEN: bad I2C write length",
			PI_BAD_I2C_RLEN    => "BAD_I2C_RLEN: bad I2C read length",
			PI_BAD_I2C_CMD     => "BAD_I2C_CMD: bad I2C command",
			PI_BAD_I2C_BAUD    => "BAD_I2C_BAUD: bad I2C baud rate, not 50-500k",
			PI_CHAIN_LOOP_CNT  => "CHAIN_LOOP_CNT: bad chain loop count",
			PI_BAD_CHAIN_LOOP  => "BAD_CHAIN_LOOP: empty chain loop",
			PI_CHAIN_COUNTER   => "CHAIN_COUNTER: too many chain counters",
			PI_BAD_CHAIN_CMD   => "BAD_CHAIN_CMD: bad chain command",
			PI_BAD_CHAIN_DELAY => "BAD_CHAIN_DELAY: bad chain delay micros",
			PI_CHAIN_NESTING   => "CHAIN_NESTING: chain counters nested too deeply",
			PI_CHAIN_TOO_BIG   => "CHAIN_TOO_BIG: chain is too long",
			PI_DEPRECATED      => "DEPRECATED: deprecated function removed",
			PI_BAD_SER_INVERT  => "BAD_SER_INVERT: bit bang serial invert not 0 or 1",
			PI_BAD_EDGE        => "BAD_EDGE: bad ISR edge value, not 0-2",
			PI_BAD_ISR_INIT    => "BAD_ISR_INIT: bad ISR initialisation",
			PI_BAD_FOREVER     => "BAD_FOREVER: loop forever must be last command",
			PI_BAD_FILTER      => "BAD_FILTER: bad filter parameter",
			PI_BAD_PAD         => "BAD_PAD: bad pad number",
			PI_BAD_STRENGTH    => "BAD_STRENGTH: bad pad drive strength",
			PI_FIL_OPEN_FAILED => "FIL_OPEN_FAILED: file open failed",
			PI_BAD_FILE_MODE   => "BAD_FILE_MODE: bad file mode",
			PI_BAD_FILE_FLAG   => "BAD_FILE_FLAG: bad file flag",
			PI_BAD_FILE_READ   => "BAD_FILE_READ: bad file read",
			PI_BAD_FILE_WRITE  => "BAD_FILE_WRITE: bad file write",
			PI_FILE_NOT_ROPEN  => "FILE_NOT_ROPEN: file not open for read",
			PI_FILE_NOT_WOPEN  => "FILE_NOT_WOPEN: file not open for write",
			PI_BAD_FILE_SEEK   => "BAD_FILE_SEEK: bad file seek",
			PI_NO_FILE_MATCH   => "NO_FILE_MATCH: no files match pattern",
			PI_NO_FILE_ACCESS  => "NO_FILE_ACCESS: no permission to access file",
			PI_FILE_IS_A_DIR   => "FILE_IS_A_DIR: file is a directory",
			PI_BAD_SHELL_STATUS => "BAD_SHELL_STATUS: bad shell return status",
			PI_BAD_SCRIPT_NAME => "BAD_SCRIPT_NAME: bad script name",
			PI_BAD_SPI_BAUD    => "BAD_SPI_BAUD: bad SPI baud rate, not 50-500k",
			PI_NOT_SPI_GPIO    => "NOT_SPI_GPIO: no bit bang SPI in progress on GPIO",
			PI_BAD_EVENT_ID    => "BAD_EVENT_ID: bad event id",
			PI_PIGIF_ERR_99...PI_PIGIF_ERR_0 => "PIGIF_ERR",
			PI_CUSTOM_ERR_999...PI_CUSTOM_ERR_0 => "CUSTOM_ERR",
			_ => "unknown error",
		}
	}
}

impl fmt::Display for Error {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		write!(f, "{}", self.description())
	}
}